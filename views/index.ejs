<html lang="en" data-bs-theme="dark">
<html>
<head>
    <title>Novel Downloader</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            padding-top: 20px;
        }
        .status-container {
            height: 300px; /* Fixed height for the status container */
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
        }
    </style>

    <!-- Check System for light / dark mode using JS -->
    <script>
      document.documentElement.setAttribute('data-bs-theme', (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'))
    </script>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">Novel Downloader</h1>
        <form id="downloadForm" class="mb-4">
            <div class="form-group">
                <label for="startUrl">Web Novel URL:</label>
                <input type="url" id="startUrl" name="startUrl" class="form-control" required>
            </div>

            <input type="hidden" id="clientId" name="clientId">

            <button type="submit" class="btn btn-primary">Download</button>
        </form>

        <h2>Status:</h2>
        <div id="status" class="status-container"></div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        const statusDiv = document.getElementById('status');
        const clientIdInput = document.getElementById('clientId');

        const ws = new WebSocket(`ws://${window.location.host}`);
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.clientId) {
                clientIdInput.value = data.clientId;
            } else if (data.message) {
                const newStatus = document.createElement('div');
                newStatus.innerHTML = data.message;
                newStatus.className = "mt-2 alert alert-info";
                statusDiv.appendChild(newStatus);
                statusDiv.scrollTop = statusDiv.scrollHeight; // Scroll to the bottom
            }
        };

        const form = document.getElementById('downloadForm');
        form.onsubmit = (e) => {
            e.preventDefault();
            statusDiv.innerHTML = '';  // Clear previous status

            const formData = new FormData(form);
            fetch('/download', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    startUrl: formData.get('startUrl'),
                    clientId: clientIdInput.value
                })
            }).then(() => {
                const newStatus = document.createElement('div');
                newStatus.innerHTML = 'Download started...';
                newStatus.className = "mt-2 alert alert-info";
                statusDiv.appendChild(newStatus);
                statusDiv.scrollTop = statusDiv.scrollHeight; // Scroll to the bottom
            });
        };
    </script>
</body>
</html>
