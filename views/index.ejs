<html lang="en" data-bs-theme="dark">
<html>
<head>
    <title>Novel Downloader</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        #library {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .book {
            width: 150px;
            text-align: center;
        }

        .book img {
            width: 150px;
            height: 200px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-radius: 5px;
            object-fit: cover; /* Ensures the image covers the area without losing aspect ratio */
        }

        .book-title {
        margin-top: 0.5rem;
        font-size: 0.9rem;
        }

        @media only screen and (max-width: 600px) {
        .book {
            width: 100px;
        }

        .book img {
            width: 100px;
            height: 133px; /* Keeps the same aspect ratio */
        }

        .book-title {
            font-size: 0.8rem;
        }
        }
        .status-container {
            height: 300px; /* Fixed height for the status container */
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
        }
    </style>

    <!-- Check System for light / dark mode using JS -->
    <script>
      document.documentElement.setAttribute('data-bs-theme', (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'))
    </script>
</head>
<body>
    <div class="container">
        <h1 class="mb-4">Novel Downloader</h1>
        <form id="downloadForm" class="mb-4">
            <div class="form-group">
                <label for="startUrl">Web Novel URL:</label>
                <input type="url" id="startUrl" name="startUrl" class="form-control" required>
            </div>

            <input type="hidden" id="clientId" name="clientId">

            <button type="submit" class="btn btn-primary">Download</button>
        </form>

        <h2>Status:</h2>
        <div id="progress"><progress id="progressbar" value="0" max="100" style="width: 100%;height: 50px;"></progress></div>
        <div id="status" class="status-container"></div>
    </div>
    <div class="container" id="library">
        <!-- Build out a library here -->
    </div>
    </body>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        const statusDiv = document.getElementById('status');
        const clientIdInput = document.getElementById('clientId');
        const progress = document.getElementById('progressbar');

        const ws = new WebSocket(`wss://${window.location.host}`);
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.clientId) {
                clientIdInput.value = data.clientId;
            } else if (data.message) {
                const newStatus = document.createElement('div');
                newStatus.innerHTML = data.message;
                newStatus.className = "mt-2 alert alert-info";
                statusDiv.appendChild(newStatus);
                statusDiv.scrollTop = statusDiv.scrollHeight; // Scroll to the bottom
                progress.value++;
            } else if (data.bookInfo) {
                // update progress bar max value from bookInfo.totalChapters
                progress.max = data.bookInfo.totalChapters;
            }
        };

        const form = document.getElementById('downloadForm');
        form.onsubmit = (e) => {
            e.preventDefault();
            statusDiv.innerHTML = '';  // Clear previous status

            const formData = new FormData(form);
            fetch('/download', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    startUrl: formData.get('startUrl'),
                    clientId: clientIdInput.value
                })
            }).then(() => {
                const newStatus = document.createElement('div');
                newStatus.innerHTML = 'Download started...';
                newStatus.className = "mt-2 alert alert-info";
                statusDiv.appendChild(newStatus);
                statusDiv.scrollTop = statusDiv.scrollHeight; // Scroll to the bottom

            });
        };

        // Scan the public directory for folders, then use the 'cover.jpg' file in each folder as the cover image, and add it to the Library area. It should be mobile friendly and responsive. It should also be able to be sorted alphabetically. Use the folder's name as the book title, replacing _ with " ". 
        document.addEventListener("DOMContentLoaded", () => {
            fetch("/books")
                .then(response => response.json())
                .then(books => {
                const library = document.getElementById("library");
                console.log(books);
                books.forEach(book => {
                    // check to see if the epub actually exists using standard javascript
                    let epub = "public/" + book.title.replace(" ","_") + "/"+book.title+".epub";
                    checkFileExists(epub, (exists) => {
                        if (!exists) {
                            return;
                        }
                        
                        const bookDiv = document.createElement("div");
                        bookDiv.classList.add("book");
                        
                        const img = document.createElement("img");
                        // Add the cover image here include root url
                        img.classList.add("book-cover");
                        img.src = book.coverUrl;
                        img.alt = book.title;
                        img.addEventListener("click", () => window.location.href = epub);
                        
                        const title = document.createElement("div");
                        title.classList.add("book-title");
                        title.innerHTML = book.title+ "<br />Last Updated: " + book.updated;
                        
                        bookDiv.appendChild(img);
                        bookDiv.appendChild(title);
                        library.appendChild(bookDiv);
                    });
                });
            })
            .catch(error => console.error("Error fetching books:", error));
            });
            function checkFileExists(url, callback) {
                fetch(url, { method: 'HEAD' })
                    .then(response => {
                    if (response.ok) {
                        callback(true);
                    } else {
                        callback(false);
                    }
                    })
                    .catch(() => {
                    callback(false);
                    });
            }
    </script>
</body>
</html>
